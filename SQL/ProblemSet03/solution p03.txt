create table Movie(mID int, title text, year int, director text);
create table Reviewer(rID int, name text);
create table Rating(rID int, mID int, stars int, ratingDate date);

/* Populate the tables with our data */
insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');

mysql> select * from movie;
+------+-------------------------+------+------------------+
| mID  | title                   | year | director         |
+------+-------------------------+------+------------------+
|  101 | Gone with the Wind      | 1939 | Victor Fleming   |
|  102 | Star Wars               | 1977 | George Lucas     |
|  103 | The Sound of Music      | 1965 | Robert Wise      |
|  104 | E.T.                    | 1982 | Steven Spielberg |
|  105 | Titanic                 | 1997 | James Cameron    |
|  106 | Snow White              | 1937 | NULL             |
|  107 | Avatar                  | 2009 | James Cameron    |
|  108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+------+-------------------------+------+------------------+
8 rows in set (0.00 sec)

mysql> select * from reviewer;;
+------+------------------+
| rID  | name             |
+------+------------------+
|  201 | Sarah Martinez   |
|  202 | Daniel Lewis     |
|  203 | Brittany Harris  |
|  204 | Mike Anderson    |
|  205 | Chris Jackson    |
|  206 | Elizabeth Thomas |
|  207 | James Cameron    |
|  208 | Ashley White     |
+------+------------------+
8 rows in set (0.00 sec)


mysql> select * from rating;
+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
14 rows in set (0.00 sec)


1)Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> select title from movie where director='Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.00 sec)


2)Find all years that have a movie that 
received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

mysql> select distinct(m.year),m.title from movie m join rating r on m.mid=r.mid where r.stars>=4 order by m.year desc;
+------+-------------------------+
| year | title                   |
+------+-------------------------+
| 2009 | Avatar                  |
| 1981 | Raiders of the Lost Ark |
| 1939 | Gone with the Wind      |
| 1937 | Snow White              |
+------+-------------------------+
4 rows in set (0.00 sec)

3)Find the titles of all movies that have no ratings. (1 point possible)

mysql> select title,mid from movie where mid not in (select mid from rating);
+-----------+------+
| title     | mid  |
+-----------+------+
| Star Wars |  102 |
| Titanic   |  105 |
+-----------+------+


4)Some reviewers didn't provide a date with their rating. Find the names of all reviewers 
who have ratings with a NULL value for the date. (1 point possible)

mysql> select re.name,r.ratingdate from reviewer re join rating r on r.rid=re.rid where ratingdate is null;
+---------------+------------+
| name          | ratingdate |
+---------------+------------+
| Daniel Lewis  | NULL       |
| Chris Jackson | NULL       |
+---------------+------------+
2 rows in set (0.00 sec)


5)Write a query to return the ratings data in a more readable format: 
reviewer name, movie title, stars, and ratingDate. Also, sort the data, 
first by reviewer name, 
then by movie title, and lastly by number of stars. (1 point possible)


mysql> select re.name,m.title,r.stars, r.ratingDate
    -> from movie m join rating r
    -> on m.mid=r.mid
    -> join reviewer re
    -> on re.rid=r.rid order by re.name,m.title,r.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
14 rows in set (0.26 sec)


6)For all cases where the same reviewer rated the same movie twice and gave it 
a higher rating the second time, return the reviewer's name and the title of 
the movie. (1 point possible)


mysql> select r1.rid,r1.mid from rating r1 join rating r2
    -> on r1.rid=r2.rid and r1.mid=r2.mid
    ->  where r1.stars<r2.stars and r1.ratingdate<r2.ratingdate;
+------+------+
| rid  | mid  |
+------+------+
|  201 |  101 |
+------+------+
1 row in set (0.00 sec)


7)For each movie that has at least one rating, find the highest 
number of stars that movie received. Return the movie title and number of stars. 
Sort by movie title. (1 point possible)


mysql> select r.stars,m.title from movie m
    -> join rating r on m.mid=r.mid
    -> where r.stars>4
    -> order by m.title;
+-------+------------+
| stars | title      |
+-------+------------+
|     5 | Avatar     |
|     5 | Snow White |
+-------+------------+
2 rows in set (0.07 sec)

8)For each movie, return the title and the 'rating spread', that is, 
the difference between highest and lowest ratings given to that movie. 
Sort by rating spread from highest to lowest, then by movie title. (1 point possible)



mysql> select m.title, (max(r.stars)-min(r.stars)) as rating_spread
    -> from movie m join rating r
    -> on m.mid=r.mid
    -> group by m .mid
    -> order by rating_spread desc, m.title ;
+-------------------------+---------------+
| title                   | rating_spread |
+-------------------------+---------------+
| Avatar                  |             2 |
| Gone with the Wind      |             2 |
| Raiders of the Lost Ark |             2 |
| E.T.                    |             1 |
| Snow White              |             1 |
| The Sound of Music      |             1 |
+-------------------------+---------------+
6 rows in set (0.07 sec)


9)Find the difference between the average rating of movies released before 1980 
and the average rating of movies released after 1980. 
(Make sure to calculate the average rating for each movie, then the average 
of those averages for movies before 1980 and movies after. 
Don't just calculate the overall average rating before and after 1980.) 
(1 point possible)



mysql> select (avg(before1980.a)-avg(after1980.a))
    -> from
    ->
    -> (select avg(r.stars) as a from rating r
    -> join movie m
    -> on m.mid=r.mid
    -> where m.year < 1980
    -> group by m.mid) AS before1980,
    ->
    -> (select avg(r.stars) as a from rating r
    -> join movie m
    -> on m.mid=r.mid
    -> where m.year > 1980
    -> group by m.mid) AS after1980;
+------------------------------------------+
| (avg(before1980.avg)-avg(after1980.avg)) |
+------------------------------------------+
|                               0.05556667 |
+------------------------------------------+
1 row in set (0.00 sec)


10)Find the names of all reviewers 
who rated Gone with the Wind. (1 point possible)

mysql> select distinct(re.name) from reviewer re
    -> join rating r on r.rid=re.rid
    -> join movie m on r.mid=m.mid
    -> where m.title='Gone with the Wind';
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.02 sec)


11)For any rating where the reviewer is the same as the director of the movie, 
return the reviewer name, movie title, and number of stars. (1 point possible)



mysql> select re.name,m.title , r.stars
    -> from reviewer re
    -> join rating r on r.rid=re.rid
    -> join movie m on m.mid=r.mid
    ->  where re.name= m.director;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)

mysql> select re.name,m.title , r.stars
    -> from reviewer re
    -> join rating r on r.rid=re.rid
    -> join movie m on m.mid=r.mid
    -> where re.name='James Cameron';
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
1 row in set (0.00 sec)


12)Return all reviewer names and movie names together in a single list, 
alphabetized. (Sorting by the first name of the reviewer and first word in 
the title is fine; no need for special processing on last names or 
removing "The".) (1 point possible)


mysql> select title from movie
    -> union
    -> select name from reviewer order by title,name;
+-------------------------+
| title                   |
+-------------------------+
| Ashley White            |
| Avatar                  |
| Brittany Harris         |
| Chris Jackson           |
| Daniel Lewis            |
| E.T.                    |
| Elizabeth Thomas        |
| Gone with the Wind      |
| James Cameron           |
| Mike Anderson           |
| Raiders of the Lost Ark |
| Sarah Martinez          |
| Snow White              |
| Star Wars               |
| The Sound of Music      |
| Titanic                 |
+-------------------------+
16 rows in set (0.19 sec)


13)Find the titles of all movies not reviewed by Chris Jackson.
(1 point possible)

mysql> select re.name,m.title , r.stars from reviewer re
    -> join rating r on r.rid=re.rid
    -> join movie m on m.mid=r.mid
    ->  where re.name='Chris Jackson';
+---------------+-------------------------+-------+
| name          | title                   | stars |
+---------------+-------------------------+-------+
| Chris Jackson | The Sound of Music      |     3 |
| Chris Jackson | E.T.                    |     2 |
| Chris Jackson | Raiders of the Lost Ark |     4 |
+---------------+-------------------------+-------+
3 rows in set (0.00 sec)

14)For all pairs of reviewers such that both reviewers gave a rating to 
the same movie, return the names of both reviewers. Eliminate duplicates, 
don't pair reviewers with themselves, and include each pair only once. 
For each pair, return the names in the pair in alphabetical order. 
(1 point possible)



15)For each rating that is the lowest (fewest stars) currently in the database, 
return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> select r.stars, re.name, m.title from reviewer re
    -> join rating r on r.rid=re.rid
    -> join movie m on m.mid=r.mid
    -> where r.stars<=2;
+-------+-----------------+-------------------------+
| stars | name            | title                   |
+-------+-----------------+-------------------------+
|     2 | Sarah Martinez  | Gone with the Wind      |
|     2 | Brittany Harris | The Sound of Music      |
|     2 | Brittany Harris | Raiders of the Lost Ark |
|     2 | Chris Jackson   | E.T.                    |
+-------+-----------------+-------------------------+
4 rows in set (0.00 sec)


16)List movie titles and average ratings, from highest-rated to lowest-rated. 
If two or more movies have the same average rating, list them in alphabetical 
order. (1 point possible)



















