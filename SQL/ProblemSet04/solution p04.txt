create table Highschooler(ID int, name text, grade int);
create table Friend(ID1 int, ID2 int);
create table Likes(ID1 int, ID2 int);


insert into Highschooler values (1510, 'Jordan', 9);
insert into Highschooler values (1689, 'Gabriel', 9);
insert into Highschooler values (1381, 'Tiffany', 9);
insert into Highschooler values (1709, 'Cassandra', 9);
insert into Highschooler values (1101, 'Haley', 10);
insert into Highschooler values (1782, 'Andrew', 10);
insert into Highschooler values (1468, 'Kris', 10);
insert into Highschooler values (1641, 'Brittany', 10);
insert into Highschooler values (1247, 'Alexis', 11);
insert into Highschooler values (1316, 'Austin', 11);
insert into Highschooler values (1911, 'Gabriel', 11);
insert into Highschooler values (1501, 'Jessica', 11);
insert into Highschooler values (1304, 'Jordan', 12);
insert into Highschooler values (1025, 'John', 12);
insert into Highschooler values (1934, 'Kyle', 12);
insert into Highschooler values (1661, 'Logan', 12);

insert into Friend values (1510, 1381);
insert into Friend values (1510, 1689);
insert into Friend values (1689, 1709);
insert into Friend values (1381, 1247);
insert into Friend values (1709, 1247);
insert into Friend values (1689, 1782);
insert into Friend values (1782, 1468);
insert into Friend values (1782, 1316);
insert into Friend values (1782, 1304);
insert into Friend values (1468, 1101);
insert into Friend values (1468, 1641);
insert into Friend values (1101, 1641);
insert into Friend values (1247, 1911);
insert into Friend values (1247, 1501);
insert into Friend values (1911, 1501);
insert into Friend values (1501, 1934);
insert into Friend values (1316, 1934);
insert into Friend values (1934, 1304);
insert into Friend values (1304, 1661);
insert into Friend values (1661, 1025);
insert into Friend select ID2, ID1 from Friend;

insert into Likes values(1689, 1709);
insert into Likes values(1709, 1689);
insert into Likes values(1782, 1709);
insert into Likes values(1911, 1247);
insert into Likes values(1247, 1468);
insert into Likes values(1641, 1468);
insert into Likes values(1316, 1304);
insert into Likes values(1501, 1934);
insert into Likes values(1934, 1501);
insert into Likes values(1025, 1101);


1)Find the names of all students who are friends with someone named Gabriel. 
(1 point possible)

mysql> select name from highschooler where id in
    -> (select id1 from friend where id2 in
    -> (select id from highschooler where name='Gabriel'));

+-----------+
| name      |
+-----------+
| Jordan    |
| Cassandra |
| Andrew    |
| Alexis    |
| Jessica   |
+-----------+
5 rows in set (0.00 sec)




mysql> select h.name from highschooler h
    -> join friend f
    -> on f.id1=h.id
    -> join highschooler h1
    -> on h1.id=f.id2
    -> where h1.name='Gabriel';
+-----------+
| name      |
+-----------+
| Jordan    |
| Cassandra |
| Andrew    |
| Alexis    |
| Jessica   |
+-----------+
5 rows in set (0.00 sec)





2)For every student who likes someone 2 or more grades younger than themselves, 
return that student's name and grade, and the name and grade of the student 
they like. (1 point possible)


mysql> select h.name,h.grade as id1grade ,h1.name,h1.grade as id2grade
    -> from highschooler h
    -> join likes l
    -> on h.id=l.id1 join highschooler h1
    -> on h1.id=l.id2 where (h.grade-h1.grade)>=2 ;
+------+----------+-------+----------+
| name | id1grade | name  | id2grade |
+------+----------+-------+----------+
| John |       12 | Haley |       10 |
+------+----------+-------+----------+
1 row in set (0.00 sec)


mysql> select * from
    -> (
    -> select
    -> h.name as name1,
    -> h.grade as id1grade,
    -> h1.name as name2,
    -> h1.grade as id2grade
    -> from likes l
    -> join highschooler h
    -> on h.id=l.id1
    -> join highschooler h1
    -> on h1.id=l.id2
    -> ) a
    -> where (id1grade - id2grade)>=2 ;
+-------+----------+-------+----------+
| name1 | id1grade | name2 | id2grade |
+-------+----------+-------+----------+
| John  |       12 | Haley |       10 |
+-------+----------+-------+----------+
1 row in set (0.00 sec)

 
3)For every pair of students who both like each other, 
return the name and grade of both students. Include each pair only once, 
with the two names in alphabetical order. (1 point possible)

mysql> select h.name,h.grade,h1.name,h1.grade
    -> from highschooler h,highschooler h1,likes l , likes l1
    -> where (h.id=l.id1 and h1.id=l.id2) and (h1.id=l1.id1 and h.id = l1.id2)
    -> order by h.name,h1.name;
+-----------+-------+-----------+-------+
| name      | grade | name      | grade |
+-----------+-------+-----------+-------+
| Cassandra |     9 | Gabriel   |     9 |
| Gabriel   |     9 | Cassandra |     9 |
| Jessica   |    11 | Kyle      |    12 |
| Kyle      |    12 | Jessica   |    11 |
+-----------+-------+-----------+-------+
4 rows in set (0.03 sec)




4)Find all students who do not appear in the Likes table 
(as a student who likes or is liked) and return their names and grades. 
Sort by grade, then by name within each grade. (1 point possible)


mysql> select name,grade from Highschooler
    -> where ID not in
    -> (select ID1 from Likes union select ID2 from Likes)
    -> order by grade, name;
+---------+-------+
| name    | grade |
+---------+-------+
| Jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+
3 rows in set (0.00 sec)


5)For every situation where student A likes student B, 
but we have no information about whom B likes 
(that is, B does not appear as an ID1 in the Likes table), 
return A and B's names and grades. (1 point possible)

mysql> select h.name,h.grade from likes l1
    -> right join likes l2 on l1.id1=l2.id2
    -> join highschooler h
    -> on h.id=l2.id2
    -> where l1.id1 is null and l1.id2 is null;
+--------+-------+
| name   | grade |
+--------+-------+
| Haley  |    10 |
| Kris   |    10 |
| Kris   |    10 |
| Jordan |    12 |
+--------+-------+
4 rows in set (0.08 sec)


6)Find names and grades of students who only have friends in the same 
Return the result sorted by grade, then by name within each grade. 
(1 point possible)



select h.name,h.grade
from highschooler h 
join friend f 
on h.id=f.id2 where
f.id1=f.id2 ;



select h.name,h.grade
from highschooler h 
join friend f 
on h.id=f.id1;



7)For each student A who likes a student B where the two are not friends, 
find if they have a friend C in common (who can introduce them!). 
For all such trios, return the name and grade of A, B, and C. (1 point possible)





8)Find the difference between the number of students in the school 
and the number of different first names. (1 point possible)

mysql> select count(*) - count(distinct name) from highschooler;
+---------------------------------+
| count(*) - count(distinct name) |
+---------------------------------+
|                               2 |
+---------------------------------+
1 row in set (0.00 sec)

mysql> select a.count-b.name1 as difference from
    -> (select count(*) as count from highschooler)as a,
    -> (select count(distinct name)as name1 from highschooler) as b;
+------------+
| difference |
+------------+
|          2 |
+------------+
1 row in set (0.09 sec)



9)Find the name and grade of all students who are liked by more 
than one other student. (1 point possible)

mysql> select h.name,h.grade
    -> from highschooler h
    -> join likes l
    -> on h.id=l.id2 group by l.id2 having count(*)>1;
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Kris      |    10 |
+-----------+-------+
2 rows in set (0.00 sec)


10)For every situation where student A likes student B, but student B likes a 
different student C, return the names and grades of A, B, and C. 
(1 point possible)





11)Find those students for whom all of their friends are in different grades 
from themselves. Return the students' names and grades.(1 point possible)

select 




12)What is the average number of friends per student? (Your result should be 
just one number.) (1 point possible)

mysql> select avg(count) from (
    -> select count(*) as count from friend group by id1) a;
+------------+
| avg(count) |
+------------+
|     2.5000 |
+------------+
1 row in set (0.00 sec)


13)Find the number of students who are either friends with Cassandra 
or are friends of friends of Cassandra. Do not count Cassandra, 
even though technically she is a friend of a friend

mysql> select count(distinct f2.id1) + count(distinct f2.id2) as a
    -> from highschooler h
    -> join friend f1
    -> on  id = f1.id1
    -> join friend f2
    -> on id = f2.id1;
+----+
| a  |
+----+
| 32 |
+----+
1 row in set (0.02 sec)


14)Find the name and grade of the student(s) with the greatest number 
of friends. (1 point possible)

mysql> select max(count) from (
    -> select count(*) as count
    -> from friend f
    -> join highschooler h
    -> on h.id=f.id1
    -> group by id1) a;
+------------+
| max(count) |
+------------+
|          4 |
+------------+
1 row in set (0.00 sec)


mysql> select name, grade, max(no)
    -> from (select h.name, h.grade, count(id1)
    -> as no from highschooler h
    -> join friend f
    -> on f.id1=h.id group by id1) r;
+--------+-------+---------+
| name   | grade | max(no) |
+--------+-------+---------+
| Jordan |     9 |       4 |
+--------+-------+---------+
1 row in set (0.07 sec)


















